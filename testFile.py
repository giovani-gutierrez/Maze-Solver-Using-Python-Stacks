# Lab04, CS 9, Giovani Gutierrez
# testFile.py

from Stack import *
from lab04 import *

def test_withSolution(): # maze with solution; able to reach goal ('G')
    maze = [
        ['+','+','+','+','G','+'],
        ['+',' ','+',' ',' ','+'],
        ['+',' ',' ',' ','+','+'],
        ['+',' ','+','+',' ','+'],
        ['+',' ',' ',' ',' ','+'],
        ['+','+','+','+','+','+'] ]
    
    assert solveMaze(maze, 4, 4) == True
    assert maze == [
        ['+', '+', '+', '+', 'G', '+'],
        ['+', 8, '+', 11, 12, '+'],
        ['+', 7, 9, 10, '+', '+'],
        ['+', 6, '+', '+', 2, '+'],
        ['+', 5, 4, 3, 1, '+'],
        ['+', '+', '+', '+', '+', '+'] ]


def test_noSolution(): # maze with goal; no solution
    maze = [
        ['+','G','+','+','+','+'],
        ['+','+','+',' ',' ','+'],
        ['+',' ',' ',' ','+','+'],
        ['+',' ','+','+',' ','+'],
        ['+',' ',' ',' ',' ','+'],
        ['+','+','+','+','+','+']]

    assert solveMaze(maze, 4, 4) == False
    assert maze == [
        ['+', 'G', '+', '+', '+', '+'],
        ['+', '+', '+', 10, 11, '+'],
        ['+', 7, 8, 9, '+', '+'],
        ['+', 6, '+', '+', 2, '+'],
        ['+', 5, 4, 3, 1, '+'],
        ['+', '+', '+', '+', '+', '+']]


def test_noGoal(): # maze with no existing goal & no solution
    maze = [
        ['+','+','+','+','+','+'],
        ['+',' ','+',' ',' ','+'],
        ['+',' ',' ',' ','+','+'],
        ['+',' ','+','+',' ','+'],
        ['+',' ',' ',' ',' ','+'],
        ['+','+','+','+','+','+']]

    assert solveMaze(maze, 4, 4) == False
    assert maze == [
        ['+','+','+','+','+','+'],
        ['+', 8,'+', 11, 12,'+'],
        ['+', 7, 9, 10,'+','+'],
        ['+', 6,'+','+', 2,'+'],
        ['+', 5, 4, 3, 1,'+'],
        ['+','+','+','+','+','+']]


def test_straightForwardPath(): # maze with straight path foreward (North) to goal
    maze = [
        ['+','+','+','+','G','+'],
        ['+',' ','+',' ',' ','+'],
        ['+',' ',' ',' ',' ','+'],
        ['+',' ','+','+',' ','+'],
        ['+',' ',' ',' ',' ','+'],
        ['+','+','+','+','+','+']]

    assert solveMaze(maze, 4, 4) == True
    assert maze == [
        ['+','+','+','+','G','+'],
        ['+',' ','+',' ',4,'+'],
        ['+',' ',' ',' ',3,'+'],
        ['+',' ','+','+',2,'+'],
        ['+',' ',' ',' ',1,'+'],
        ['+','+','+','+','+','+']]


def test_straightPathWest(): # maze with straight path towards goal Westward
    maze = [
        ['+','+','+','+','+','+'],
        ['+', ' ','+', ' ', ' ','+'],
        ['+', ' ', ' ', ' ','+','+'],
        ['+', '+','+','+', '+','+'],
        ['G', ' ', ' ', ' ', ' ','+'],
        ['+','+','+','+','+','+']]

    assert solveMaze(maze, 4, 4) == True
    assert maze == [
        ['+','+','+','+','+','+'],
        ['+', ' ','+', ' ', ' ','+'],
        ['+', ' ', ' ', ' ','+','+'],
        ['+', '+','+','+', '+','+'],
        ['G', 4, 3, 2, 1,'+'],
        ['+','+','+','+','+','+']]


def test_openSpaceMaze(): # maze with borders & all open spaces except the goal
    maze = [
        ['+', '+', '+', '+', '+'],
        ['+', ' ', ' ', ' ', '+'],
        ['+', ' ', ' ', ' ', '+'],
        ['+', ' ', ' ', ' ', '+'],
        ['+', ' ', ' ', ' ', '+'],
        ['+', ' ', ' ', ' ', '+'],
        ['+', ' ', 'G', ' ', '+'],
        ['+', ' ', ' ', ' ', '+'],
        ['+', ' ', ' ', ' ', '+'],
        ['+', '+', '+', '+', '+']]

    assert solveMaze(maze, 8, 3) == True
    assert maze == [
        ['+', '+', '+', '+', '+'],
        ['+', 10, 9, 8, '+'],
        ['+', 11, ' ', 7, '+'],
        ['+', 12, ' ', 6, '+'],
        ['+', 13, ' ', 5, '+'],
        ['+', 14, ' ', 4, '+'],
        ['+', 15, 'G', 3, '+'],
        ['+', 16, 19, 2, '+'],
        ['+', 17, 18, 1, '+'],
        ['+', '+', '+', '+', '+']]


def test_openSpaceNoGoal(): # maze with borders & all open spaces with no goal
    maze = [
        ['+', '+', '+', '+', '+'],
        ['+', ' ', ' ', ' ', '+'],
        ['+', ' ', ' ', ' ', '+'],
        ['+', ' ', ' ', ' ', '+'],
        ['+', ' ', ' ', ' ', '+'],
        ['+', ' ', ' ', ' ', '+'],
        ['+', ' ', ' ', ' ', '+'],
        ['+', ' ', ' ', ' ', '+'],
        ['+', ' ', ' ', ' ', '+'],
        ['+', '+', '+', '+', '+']]

    assert solveMaze(maze, 8, 2) == False
    assert maze == [
        ['+', '+', '+', '+', '+'],
        ['+', 9, 8, 17, '+'],
        ['+', 10, 7, 18, '+'],
        ['+', 11, 6, 19, '+'],
        ['+', 12, 5, 20, '+'],
        ['+', 13, 4, 21, '+'],
        ['+', 14, 3, 22, '+'],
        ['+', 15, 2, 23, '+'],
        ['+', 16, 1, 24, '+'],
        ['+', '+', '+', '+', '+']]


def test_oneSpace(): # small maze with one open space and a goal
    maze = [
        ['+', '+', '+'],
        ['+', ' ', '+'],
        ['+', 'G', '+'],
        ['+', '+', '+']]

    assert solveMaze(maze, 1, 1) == True
    assert maze == [
        ['+', '+', '+'],
        ['+', 1, '+'],
        ['+', 'G', '+'],
        ['+', '+', '+']]
